printf "\nUseful Docker aliases:\n"

isNamedContainer() {
   if [ -e ~/IOTstack/docker-compose.yml ] ; then
      echo $(grep -c -E "^ +container_name: $1" ~/IOTstack/docker-compose.yml)
   else
      echo 0
   fi
}

if [ $(isNamedContainer influxdb) -gt 0 ] ; then
   alias             influx='docker exec -it influxdb influx -precision=rfc3339'
   echo "        Influx: influx"
fi

if [ $(isNamedContainer nodered) -gt 0 ] ; then
   alias       NODERED_DATA='cd ~/IOTstack/volumes/nodered/data;ls'
   echo "       NodeRed: NODERED_DATA"
fi

unset -f isNamedContainer

alias                 UP='docker-compose -f ~/IOTstack/docker-compose.yml up -d'
alias              BUILD='docker-compose -f ~/IOTstack/docker-compose.yml up --build -d'
alias            REBUILD='docker-compose -f ~/IOTstack/docker-compose.yml build --no-cache --pull'
alias               DOWN='docker-compose -f ~/IOTstack/docker-compose.yml down'
alias              PRUNE='docker system prune -f'
alias               PULL='docker-compose -f ~/IOTstack/docker-compose.yml pull'
alias           RECREATE='docker-compose -f ~/IOTstack/docker-compose.yml up -d --force-recreate'
alias            RESTART='docker-compose -f ~/IOTstack/docker-compose.yml restart'

if [[ "v$(docker-compose version --short)" < "v2.19.0" ]] ; then
   alias       TERMINATE='docker-compose -f ~/IOTstack/docker-compose.yml rm --force --stop -v'
else
   alias       TERMINATE='docker-compose -f ~/IOTstack/docker-compose.yml down'
fi

alias                  I='cd ~/IOTstack; ls'
alias                  S='cd ~/IOTstack/services; ls'
alias                  T='cd ~/IOTstack/.templates; ls'
alias                  V='cd ~/IOTstack/volumes; ls'

DPS() {
   local DPS_CMD="docker ps -a --format \"table {{.Names}}\t{{.RunningFor}}\t{{.Status}}\t{{.Size}}\""
   while (( "$#" )); do
      DPS_CMD="$DPS_CMD --filter name=$1"
      shift
   done
   bash -c "$DPS_CMD"
}

DNET() {
   local DNET_CMD="docker ps --format \"table {{.Names}}\t{{.Ports}}\""
   while (( "$#" )); do
      DNET_CMD="$DNET_CMD --filter name=$1"
      shift
   done
   bash -c "$DNET_CMD"
}

DI() {
   local DI_CMD="docker images"
   if [ $# -gt 0 ] ; then DI_CMD="$DI_CMD | grep -e \"^REPOSITORY\"" ; fi
   while (( "$#" )); do
      DI_CMD="$DI_CMD -e \"$1\""
      shift
   done
   bash -c "$DI_CMD"
}

# define the path to the alias cache
ALIAS_CACHE_DIR="$HOME/.cache/IOTstackAliases"
ALIAS_CACHE="${ALIAS_CACHE_DIR}/cache"

# ensure the directory exists
mkdir -p "${ALIAS_CACHE_DIR}"

# source the cache if it exists, otherwise ensure it exists
[ -f "${ALIAS_CACHE}" ] && . "${ALIAS_CACHE}" || touch "${ALIAS_CACHE}"

# fetch the list of running containers
CONTAINERS=$(curl -s --unix-socket /var/run/docker.sock http://localhost/containers/json | jq -r '.[].Names | .[] | gsub("^/";"")')

# non-empty result?
if [ -n "${CONTAINERS}" ] ; then
	# iterate the list of running containers
	for CONTAINER in ${CONTAINERS} ; do
		# form the alias name
		ALIAS_NAME=${CONTAINER^^}_SHELL
		# does an alias already exist?
		if [ "$(type -t "${ALIAS_NAME}")" != "alias" ] ; then
			# no! need to create one
			echo -n "   No shell alias for ${CONTAINER} - checking - "
			CANDIDATES=$(docker exec ${CONTAINER} which bash ash zsh sh) 
			if [ $? -eq 1 ] ; then
				FIRST=$(echo ${CANDIDATES} | cut -d " " -f 1)
				echo "found ${FIRST} - defining ${ALIAS_NAME}"
				echo "alias ${ALIAS_NAME}='docker exec -it ${CONTAINER} ${FIRST}'" >>"${ALIAS_CACHE}"
				alias ${ALIAS_NAME}="docker exec -it ${CONTAINER} ${FIRST}"
			else
				echo "no shell found"
			fi
		fi
	done
else
	echo "No containers running"
fi

# clean up
unset ALIAS_CACHE_DIR ALIAS_CACHE CONTAINERS CONTAINER ALIAS_NAME CANDIDATES FIRST

echo "        Docker: BUILD     | DPS       | DNET      {<container> …}"
echo "                PULL      | REBUILD   | RECREATE  {<container> …}"
echo "                RESTART   | UP        | DOWN      {<container> …}"
echo "                                        DI        {<image> …}"
echo "                PRUNE, I, S, T, V"

