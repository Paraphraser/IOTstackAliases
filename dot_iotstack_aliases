printf "\nUseful Docker aliases:\n"

isNamedContainer() {
   if [ -e ~/IOTstack/docker-compose.yml ] ; then
      echo $(grep -c -E "^ +container_name: $1" ~/IOTstack/docker-compose.yml)
   else
      echo 0
   fi
}

if [ $(isNamedContainer adguardhome) -gt 0 ] ; then
   alias      ADGUARD_SHELL='docker exec -it adguardhome ash'
   echo "       AdGuard: ADGUARD_SHELL"
fi

if [ $(isNamedContainer gitea) -gt 0 ] ; then
   alias        GITEA_SHELL='docker exec -it gitea bash'
   echo "         Gitea: GITEA_SHELL"
fi

if [ $(isNamedContainer grafana) -gt 0 ] ; then
   alias      GRAFANA_SHELL='docker exec -it grafana bash'
   echo "       Grafana: GRAFANA_SHELL"
fi

if [ $(isNamedContainer homeassistant) -gt 0 ] ; then
   alias           HA_SHELL='docker exec -it homeassistant bash'
   echo " HomeAssistant: HA_SHELL"
fi

if [ $(isNamedContainer home_assistant) -gt 0 ] ; then
   alias           HA_SHELL='docker exec -it home_assistant bash'
   echo " HomeAssistant: HA_SHELL"
fi

if [ $(isNamedContainer homebridge) -gt 0 ] ; then
   alias           HB_SHELL='docker exec -it homebridge ash'
   echo "    HomeBridge: HB_SHELL"
fi

if [ $(isNamedContainer influxdb) -gt 0 ] ; then
   alias             influx='docker exec -it influxdb influx -precision=rfc3339'
   alias       INFLUX_SHELL='docker exec -it influxdb bash'
   echo "        Influx: influx, INFLUX_SHELL"
fi

if [ $(isNamedContainer mosquitto) -gt 0 ] ; then
   alias    MOSQUITTO_SHELL='docker exec -it mosquitto ash'
   echo "     Mosquitto: MOSQUITTO_SHELL"
fi

if [ $(isNamedContainer nextcloud) -gt 0 ] ; then
   alias    NEXTCLOUD_SHELL='docker exec -it nextcloud bash'
   alias NEXTCLOUD_DB_SHELL='docker exec -it nextcloud_db bash'
   echo "     NextCloud: NEXTCLOUD_SHELL, NEXTCLOUD_DB_SHELL"
fi

if [ $(isNamedContainer nodered) -gt 0 ] ; then
   alias      NODERED_SHELL='docker exec -it nodered bash'
   alias       NODERED_DATA='cd ~/IOTstack/volumes/nodered/data;ls'
   echo "       NodeRed: NODERED_SHELL, NODERED_DATA"
fi

if [ $(isNamedContainer octoprint) -gt 0 ] ; then
   alias    OCTOPRINT_SHELL='docker exec -it octoprint bash'
   echo "     OctoPrint: OCTOPRINT_SHELL"
fi

if [ $(isNamedContainer pihole) -gt 0 ] ; then
   alias       PIHOLE_SHELL='docker exec -it pihole bash'
   echo "        PiHole: PIHOLE_SHELL"
fi

if [ $(isNamedContainer postgres) -gt 0 ] ; then
   alias     POSTGRES_SHELL='docker exec -it postgres bash'
   echo "      Postgres: POSTGRES_SHELL"
fi

if [ $(isNamedContainer telegraf) -gt 0 ] ; then
   alias     TELEGRAF_SHELL='docker exec -it telegraf bash'
   echo "      Telegraf: TELEGRAF_SHELL"
fi

if [ $(isNamedContainer wireguard) -gt 0 ] ; then
   alias    WIREGUARD_SHELL='docker exec -it wireguard bash'
   echo "     WireGuard: WIREGUARD_SHELL"
fi

if [ $(isNamedContainer zigbee2mqtt) -gt 0 ] ; then
   alias       ZIGBEE_SHELL='docker exec -it zigbee2mqtt ash'
   echo "        Zigbee: ZIGBEE_SHELL"
fi

unset -f isNamedContainer

alias                 UP='docker-compose -f ~/IOTstack/docker-compose.yml up -d'
alias              BUILD='docker-compose -f ~/IOTstack/docker-compose.yml up --build -d'
alias            REBUILD='docker-compose -f ~/IOTstack/docker-compose.yml build --no-cache --pull'
alias               DOWN='docker-compose -f ~/IOTstack/docker-compose.yml down'
alias              PRUNE='docker system prune -f'
alias               PULL='docker-compose -f ~/IOTstack/docker-compose.yml pull'
alias           RECREATE='docker-compose -f ~/IOTstack/docker-compose.yml up -d --force-recreate'
alias            RESTART='docker-compose -f ~/IOTstack/docker-compose.yml restart'
alias          TERMINATE='docker-compose -f ~/IOTstack/docker-compose.yml rm --force --stop -v'
alias                  I='cd ~/IOTstack; ls'
alias                  S='cd ~/IOTstack/services; ls'
alias                  T='cd ~/IOTstack/.templates; ls'
alias                  V='cd ~/IOTstack/volumes; ls'

DPS() {
   DPS_CMD="docker ps --format \"table {{.Names}}\t{{.RunningFor}}\t{{.Status}}\""
   while (( "$#" )); do
      DPS_CMD="$DPS_CMD --filter name=$1"
      shift
   done
   bash -c "$DPS_CMD"
}

DNET() {
   DNET_CMD="docker ps --format \"table {{.Names}}\t{{.Ports}}\""
   while (( "$#" )); do
      DNET_CMD="$DNET_CMD --filter name=$1"
      shift
   done
   bash -c "$DNET_CMD"
}

echo "        Docker: BUILD     | DPS       | DNET      {<container> …}"
echo "                PULL      | REBUILD   | RECREATE  {<container> …}"
echo "                RESTART   | TERMINATE | UP        {<container> …}"
echo "                DOWN, PRUNE, I, S, T, V"
