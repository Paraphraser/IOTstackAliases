printf "\nUseful Docker aliases:\n"

isNamedContainer() {
   if [ -e ~/IOTstack/docker-compose.yml ] ; then
      echo $(grep -c -E "^ +container_name: $1" ~/IOTstack/docker-compose.yml)
   else
      echo 0
   fi
}

if [ $(isNamedContainer influxdb) -gt 0 ] ; then
   alias             influx='docker exec -it influxdb influx -precision=rfc3339'
   echo "        Influx: influx"
fi

if [ $(isNamedContainer nodered) -gt 0 ] ; then
   alias       NODERED_DATA='cd ~/IOTstack/volumes/nodered/data;ls'
   echo "       NodeRed: NODERED_DATA"
fi

unset -f isNamedContainer

alias                 UP='docker-compose -f ~/IOTstack/docker-compose.yml up -d'
alias              BUILD='docker-compose -f ~/IOTstack/docker-compose.yml up --build -d'
alias            REBUILD='docker-compose -f ~/IOTstack/docker-compose.yml build --no-cache --pull'
alias               DOWN='docker-compose -f ~/IOTstack/docker-compose.yml down'
alias              PRUNE='docker system prune -f'
alias               PULL='docker-compose -f ~/IOTstack/docker-compose.yml pull'
alias           RECREATE='docker-compose -f ~/IOTstack/docker-compose.yml up -d --force-recreate'
alias            RESTART='docker-compose -f ~/IOTstack/docker-compose.yml restart'
alias          TERMINATE='docker-compose -f ~/IOTstack/docker-compose.yml rm --force --stop -v'
alias                  I='cd ~/IOTstack; ls'
alias                  S='cd ~/IOTstack/services; ls'
alias                  T='cd ~/IOTstack/.templates; ls'
alias                  V='cd ~/IOTstack/volumes; ls'

DPS() {
   local DPS_CMD="docker ps --format \"table {{.Names}}\t{{.RunningFor}}\t{{.Status}}\""
   while (( "$#" )); do
      DPS_CMD="$DPS_CMD --filter name=$1"
      shift
   done
   bash -c "$DPS_CMD"
}

DNET() {
   local DNET_CMD="docker ps --format \"table {{.Names}}\t{{.Ports}}\""
   while (( "$#" )); do
      DNET_CMD="$DNET_CMD --filter name=$1"
      shift
   done
   bash -c "$DNET_CMD"
}

echo "        Docker: BUILD     | DPS       | DNET      {<container> …}"
echo "                PULL      | REBUILD   | RECREATE  {<container> …}"
echo "                RESTART   | TERMINATE | UP        {<container> …}"
echo "                DOWN, PRUNE, I, S, T, V"

# define the path to the alias cache
ALIAS_CACHE_DIR="$HOME/.cache/IOTstackAliases"
ALIAS_CACHE="$ALIAS_CACHE_DIR/cache"

# ensure the directory exists
mkdir -p "$ALIAS_CACHE_DIR"

# does the cache exist?
if [ ! -f "$ALIAS_CACHE" ] ; then

   # no! fetch the list of running containers
   CONTAINERS=$(curl -s --unix-socket /var/run/docker.sock http://localhost/containers/json | jq -r '.[].Names | .[] | gsub("^/";"")')

   # non-empty result?
   if [ -n "$CONTAINERS" ] ; then

      # yes! tell the user this may take some time
      echo "Building $ALIAS_CACHE - this may take some time"

      # initialise the cache file
      touch "$ALIAS_CACHE"
      echo "# Rebuilt $(date)" >>"$ALIAS_CACHE"

      # iterate the list
      for CONTAINER in $CONTAINERS ; do
         echo -n "   checking $CONTAINER - "
         CANDIDATES=$(docker exec $CONTAINER which bash ash zsh sh) 
         if [ $? -eq 1 ] ; then
            FIRST=$(echo $CANDIDATES | cut -d " " -f 1)
            echo "$FIRST"
            echo "alias ${CONTAINER^^}_SHELL='docker exec -it $CONTAINER $FIRST'" >>"$ALIAS_CACHE"
         else
            echo "no shell found"
         fi
      done

      echo "        Shells: <CONTAINER>_SHELL (all capital letters)" >>"$ALIAS_CACHE"

   else

      echo "No containers running"

   fi

fi

# does the cache exist now?
if [ -f "$ALIAS_CACHE" ] ; then

   # yes! source the cache
   . "$ALIAS_CACHE"

fi

# clean up
unset ALIAS_CACHE_DIR ALIAS_CACHE CONTAINERS CONTAINER CANDIDATES FIRST ALIASNAME

